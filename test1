package com.herokuapp.theinternet;

import org.testng.annotations.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Parameters;

//the main class
public class LoginTests {

	private WebDriver driver;

	@Parameters({ "browser" })
	@BeforeMethod(alwaysRun = true)
	private void setUp(String browser) {

		// Create driver instance to send commands

		switch (browser) {
		case "chrome":
			System.setProperty("webdriver.chrome.driver", "src/main/resources/chromedriver.exe");
			driver = new ChromeDriver();
			break;

		case "firefox":
			System.setProperty("webdriver.gecko.driver", "src/main/resources/geckodriver.exe");
			driver = new FirefoxDriver();
			break;

		default:

			System.out.println("Starting chrome browser as default.");
			System.setProperty("webdriver.chrome.driver", "src/main/resources/chromedriver.exe");
			driver = new ChromeDriver();

			break;
		}

		sleep(3000);

		// maximize browser window

		driver.manage().window().maximize(); // Open test page

	}

//the test methods	
	@Test(priority = 1, groups = { "positiveTests", "smokeTests" })
	public void positiveLoginTest() {

		System.out.println("Starting Login Test.");

		String url = "http://the-internet.herokuapp.com/login";

		driver.get(url);

		System.out.println("Page is open.");

		// slow down the test so you can see what's happening

		sleep(2000);

		// Enter user name

		WebElement username = driver.findElement(By.id("username"));
		username.sendKeys("tomsmith");

		// Enter password

		WebElement password = driver.findElement(By.name("password"));
		password.sendKeys("SuperSecretPassword!");

		// Click login button

		WebElement logInButton = driver.findElement(By.tagName("button"));
		logInButton.click();

		sleep(3000);

		// Verifications: //URL is

		String expectedUrl = "http://the-internet.herokuapp.com/secure";
		String actualUrl = driver.getCurrentUrl();

		Assert.assertEquals(actualUrl, expectedUrl, "This is the incorrect url");

		// Logout button is displayed

		WebElement logOutButton = driver.findElement(By.xpath("//a[@class='button secondary radius']"));
		Assert.assertTrue(logOutButton.isDisplayed(), "The button is missing.");

		// Logged into secure area is present, aka successful login message
		WebElement successMessage = driver.findElement(By.cssSelector("div#flash"));

		String expectedMessage = "You logged into a secure area!";
		String actualMessage = successMessage.getText();

		Assert.assertTrue(actualMessage.contains(expectedMessage), "These dont match.");

		// close browser

	}

	@Test(priority = 2, groups = { "negativeTests", "smokeTests" })
	@Parameters({ "username", "password", "expectedMessage" })
	public void negativeLoginTest(String username, String password, String expectedMessage) {

		System.out.println("Starting Negative login test with " + username + " : " + password);

		// Open test page

		String url = "http://the-internet.herokuapp.com/login";

		driver.get(url);

		System.out.println("Page is open.");

		// Enter username

		WebElement usernameElement = driver.findElement(By.id("username"));
		usernameElement.sendKeys(username);

		// Enter correct password

		WebElement passwordElement = driver.findElement(By.name("password"));
		passwordElement.sendKeys(password);

		// Click login button

		WebElement logInButton = driver.findElement(By.tagName("button"));
		logInButton.click();

		sleep(3000);

		// Logged into secure area is present, aka successful login message
		WebElement invalidMessage = driver.findElement(By.cssSelector("div#flash"));

		String actualMessage = invalidMessage.getText();

		Assert.assertTrue(actualMessage.contains(expectedMessage), "These dont match.");

		System.out.println("This is an invalid message recieved and it passed!");
		// close browser

	}

	@AfterMethod(alwaysRun = true)
	private void cleanUp() {

		driver.quit();
	}

	private void sleep(long m) {
		try {
			Thread.sleep(m);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
